pipeline {
    agent any

    environment {
        AWS_PROFILE = "${AWS_PROFILE}"
        GIT_SHORT_SHA = GIT_COMMIT.take(10)
    }

    stages {
        stage('Init tf vars') {
            steps {
                script {
                    echo "<======== Terraform tfvars download =========>"
                    def currentWorkspace = sh(script: 'pwd', returnStdout: true).trim()
                    dir("${currentWorkspace}/terraform/envs/prod") {
                        echo "<========== Downloading Terraform tfvars file ==========>"
                        sh 'aws s3 cp s3://bckt-tf-state-b1os/prod/prod.tfvars prod.tfvars --profile ${AWS_PROFILE}'
                    }
                }
            }
        }

        stage('Init') {
            steps {
                script {
                    echo '<======== Jenkins File execution started =========>'
                    def currentWorkspace = sh(script: 'pwd', returnStdout: true).trim()
                    dir("${currentWorkspace}/terraform/envs/prod") {
                        echo '<========== Inside terraform ==========>'
                        // Assuming you have Terraform installed and configured
                        sh 'terraform init -reconfigure'
                    }
                }
            }
        }

        stage('Terraform Action') {
            steps {
                script {
                    echo "<========= Performing Terraform Action =======>"
                    def currentWorkspace = sh(script: 'pwd', returnStdout: true).trim()
                    dir("${currentWorkspace}/terraform/envs/prod") {
                        if (TF_ACTION == 'PLAN') {
                            sh 'terraform plan -var-file=prod.tfvars -out=prod-tfplan.tfplan'
                        } else if (TF_ACTION == 'APPLY') {
                            sh "terraform apply -var-file=prod.tfvars -auto-approve"
                        } else if (TF_ACTION == 'DESTROY') {
                            sh "terraform destroy -var-file=prod.tfvars -auto-approve"
                        } else {
                            error "Invalid action: '${TF_ACTION}'"
                        }
                    }
                }
            }
        }
    }
}